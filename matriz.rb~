require 'rubygems'
require 'bundler/setup'
require 'nokogiri'

class Matrices
	include Comparable
	include Enumerable

	def initialize(m)
		
	end
	
	attr_reader :filas, :columnas, :matriz



	def mostrar

	end

	def + (other)
		raise "you must define method"
	end

	def - (other)
		raise "you must define method"
	end

	def * (other)
		raise "you must define method"
	end

	def traspuesta
		raise "you must define method"
	end

	def opuesta
		raise "you must define method"
	end
end


class Dispersa < Matrices
  def initialize
    puts 'dispersa initializer'
    super
  end
end


class Densa < Matrices

	def initialize(m)
		@filas = m.size
		@columnas = m[1].size
		@matriz = m
	end
	
	attr_reader :filas, :columnas, :matriz

#####Mostrar matriz

	def mostrar
		i=0
		  while i < @matriz.length
		   #print "Posicion #{i}---> "
		   print @matriz[i]
		   print "\n"
		   i += 1
		  end    #Fin del bucle
	end



#####Cálculo de Suma de Matrices Enteras
        def +(other)
              i=0
                 matriz_cp = @matriz
                while i < @filas
                        j=0
                        while j < @columnas
                           matriz_cp[i][j] = matriz_cp[i][j] + other.matriz[i][j]
                                j += 1
                        end
                        i += 1
                end
                Matrices.new(matriz_cp)
        end

####Cálculo Resta de Matrices Enteras
        def -(other)
                i=0
                 matriz_cp = @matriz
                while i < @filas
                        j=0
                        while j < @columnas
                           matriz_cp[i][j] = matriz_cp[i][j] - other.matriz[i][j]
                                j += 1
                        end
                        i += 1
                end
                Matrices.new(matriz_cp)
        end


#####Calculo de Multiplicacion Mátrices enteras
        def * (other)
                i=0
                 matriz_cp = Array.new(@filas) {Array.new(other.columnas)}
                while i < @filas
                        j=0
                        while j < other.columnas
                                matriz_cp[i][j] = 0
                                k=0
                                while k < @columnas
                                   matriz_cp[i][j] = matriz_cp[i][j] + (matriz[i][k] * other.matriz[k][j])
                                        k+=1
                                end
                                j += 1
                        end
                        i += 1
                end
                Matrices.new(matriz_cp)
        end




####Traspuesta de una matriz
        def traspuesta
                i=0
                mtrasp = Array.new(@filas) {Array.new(self.columnas)}
                while i < @filas
                        j=0
                        while j < @columnas
                                mtrasp[i][j] = self.matriz[j][i]
                                j+=1
                        end
                        i+=1
                end
                Matrices.new(mtrasp)
        end


####Opuesta de una matriz
        def opuesta

                i=0
                mop = Array.new(@filas) {Array.new(self.columnas)}
                while i < @filas
                        j=0
                        while j < @columnas
                                mop[i][j] = (self.matriz[i][j]) * (- 1)
                                j+=1
                        end
                        i+=1
                end
                Matrices.new(mop)

        end
end
